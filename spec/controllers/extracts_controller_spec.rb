require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ExtractsController, type: :controller do
  before(:each){
    sign_in
  }

  # This should return the minimal set of attributes required to create a valid
  # Extract. As you add validations to Extract, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    strip_housekeeping_attributes(FactoryGirl.build(:valid_extract).attributes)
  }

  let(:invalid_attributes) {
    {
      quantity_value: nil,
      quantity_unit: nil,
      concentration_value: nil,
      concentration_unit: nil,
      verbatim_anatomical_origin: nil,
      year_made: nil,
      month_made: nil,
      day_made: nil
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ExtractsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all extracts as @extracts" do
      extract = Extract.create! valid_attributes
      get :index, {}, session: valid_session
      expect(assigns(:recent_objects)).to eq([extract])
    end
  end

  describe "GET #show" do
    it "assigns the requested extract as @extract" do
      extract = Extract.create! valid_attributes
      get :show, {id: extract.to_param}, session: valid_session
      expect(assigns(:extract)).to eq(extract)
    end
  end

  describe "GET #new" do
    it "assigns a new extract as @extract" do
      get :new, {}, session: valid_session
      expect(assigns(:extract)).to be_a_new(Extract)
    end
  end

  describe "GET #edit" do
    it "assigns the requested extract as @extract" do
      extract = Extract.create! valid_attributes
      get :edit, {id: extract.to_param}, session: valid_session
      expect(assigns(:extract)).to eq(extract)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Extract" do
        expect {
          post :create, {extract: valid_attributes}, session: valid_session
        }.to change(Extract, :count).by(1)
      end

      it "assigns a newly created extract as @extract" do
        post :create, {extract: valid_attributes}, session: valid_session
        expect(assigns(:extract)).to be_a(Extract)
        expect(assigns(:extract)).to be_persisted
      end

      it "redirects to the created extract" do
        post :create, {extract: valid_attributes}, session: valid_session
        expect(response).to redirect_to(Extract.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved extract as @extract" do
        post :create, {extract: invalid_attributes}, session: valid_session
        expect(assigns(:extract)).to be_a_new(Extract)
      end

      it "re-renders the 'new' template" do
        post :create, {extract: invalid_attributes}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        attributes = valid_attributes
        attributes[:quantity_value] = 1000
        attributes
      }

      it "updates the requested extract" do
        extract = Extract.create! valid_attributes
        put :update, {id: extract.to_param, extract: new_attributes}, session: valid_session
        extract.reload
        expect(extract.quantity_value == new_attributes[:quantity_value]).to be true
      end

      it "assigns the requested extract as @extract" do
        extract = Extract.create! valid_attributes
        put :update, {id: extract.to_param, extract: valid_attributes}, session: valid_session
        expect(assigns(:extract)).to eq(extract)
      end

      it "redirects to the extract" do
        extract = Extract.create! valid_attributes
        put :update, {id: extract.to_param, extract: valid_attributes}, session: valid_session
        expect(response).to redirect_to(extract)
      end
    end

    context "with invalid params" do
      it "assigns the extract as @extract" do
        extract = Extract.create! valid_attributes
        put :update, {id: extract.to_param, extract: invalid_attributes}, session: valid_session
        expect(assigns(:extract)).to eq(extract)
      end

      it "re-renders the 'edit' template" do
        extract = Extract.create! valid_attributes
        put :update, {id: extract.to_param, extract: invalid_attributes}, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested extract" do
      extract = Extract.create! valid_attributes
      expect {
        delete :destroy, {id: extract.to_param}, session: valid_session
      }.to change(Extract, :count).by(-1)
    end

    it "redirects to the extracts list" do
      extract = Extract.create! valid_attributes
      delete :destroy, {id: extract.to_param}, session: valid_session
      expect(response).to redirect_to(extracts_url)
    end
  end

end
