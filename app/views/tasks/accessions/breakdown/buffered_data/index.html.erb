<div class="breakdown_nav">
  <%= render '/tasks/accessions/breakdown/breakdown_nav_items' -%>
  <div> <%= link_to('Depiction breakdown', sqed_depiction_breakdown_task_path(@result.sqed_depiction), 'data-turbolinks' => false) -%> </div>
</div>

<% if @result.sqed_result %>

<div class="flexbox sqed_breakdown" id="breakdown_buffered_data">
  <div class="item item1" id="depiction_navigator_target"> <span class="subtle">Calculating...</span>
  </div>

  <div class="item item2">
    <div id="verbatim_locality_text">
      <%= best_in_place(
        @collection_object.metamorphosize, :buffered_collecting_event,
        place_holder: 'click to edit',
        as: :textarea,
        class:  'highlight_on_success',
        activator: '#verbatim_locality_edit',
        inner_class: 'buffered_collecting_event_input') -%>
    </div>

    <p class="subtle">
    highlight to copy | <%= link_to('edit in place', '#', data: { turbolinks: false }, id: 'verbatim_locality_edit') -%>
    </p>

    <div id="bigbox">
      <div id="paper"> </div>
    </div>

    <div id="selected_picture">
      <canvas id="selected_picture_canvas" height="400" width="400"></canvas>
    </div>
  </div>

  <div class="item item3">
    <div>
      <h3> Edit collecting event  </h3>
      <div id="message"> </div>
      <div id="form">
        <%= render "form" %>
      </div>
      <%= link_to 'Skip to next', collection_object_buffered_data_breakdown_task_path(@result.sqed_depiction.next_sqed_depiction.depiction_object)  -%>

      <%# render "similar_buffered_collecting_event_values" %>

      <hr class="divisor">
      <h3> Collecting event details </h3>

      <div>
        <% if @collection_object.collecting_event.new_record? %>
            <p> Not yet created. </p>
        <% else %>
          <p>
            <%= link_to("Show collecting event", collecting_event_path(@collection_object.collecting_event), target: '_blank' ) -%>
            <%= render(partial: '/collecting_events/attributes', locals: {object: @collection_object.collecting_event}) -%>
          </p>
        <% end %>
      </div>

    </div>
  </div>
</div>

<%= image_tag(@result.depiction.image.image_file.url(:original), id: 'original_image', hidden: true) %>

<script>
    $("#collection_object_collecting_event_attributes_verbatim_locality").focus();

    // .selection is from http://madapaja.github.io/jquery.selection/
    $('#verbatim_locality_text').click(function(){
        $('#collection_object_collecting_event_attributes_verbatim_locality').val($.selection());
    });

    var imageObject;
    imageObject = new Image();

    var imageAspectRatio;
    var canvas;
    var context;
    var paper;
    var paperWidth = 400;
    var paperHeight = 400;

    var select_box;
    var big_svg_image;

    // current position of the select box
    var boxX = 0;
    var boxY = 0;
    var boxW = 50;
    var boxH = 50;

    var sourceX;
    var sourceY;
    var sourceWidth;
    var sourceHeight;

    var svg_box = {
        'type': 'rect',
        'x': 0,
        'y': 0,
        'width': 50,
        'height': 50,
        'fill': '#ffffff',
        'stroke': '#000000',
        'stroke-width': 1,
        'opacity': 0.4
    };

    var p;
    p = Raphael("paper", paperWidth, paperHeight);

    big_svg_image = p.image("<%= @result.image_path_for_large_image(@result.sqed_depiction.collecting_event_sections.first) -%>", <%= @result.large_dimensions_for(@result.primary_image) -%>);
    addSelectBox(p);
    getBox();

    function addSelectBox(paper) {
        var changeCursor = function (e, mouseX, mouseY) {
            // Don't change cursor during a drag operation
            if (this.dragging === true) {
                return;
            }

            // X,Y Coordinates relative to shape's orgin
            var relativeX = mouseX - $('#paper').offset().left - this.attr('x');
            var relativeY = mouseY - $('#paper').offset().top - this.attr('y');

            var shapeWidth = this.attr('width');
            var shapeHeight = this.attr('height');

            var resizeBorder = 10;

            // Change cursor
            if (relativeX < resizeBorder) {     // left (west) border, so see if also a corner
                this.attr('cursor', 'w-resize');
                if(relativeY < resizeBorder) {
                    this.attr('cursor', 'nw-resize');
                } else if (relativeY > shapeHeight - resizeBorder) {
                    this.attr('cursor', 'sw-resize');
                }
            } else if (relativeX > shapeWidth - resizeBorder) {     // right (east) border, so see if also a corner
                this.attr('cursor', 'e-resize');
                if(relativeY > shapeHeight - resizeBorder) {
                    this.attr('cursor', 'se-resize');
                } else if (relativeY < resizeBorder) {
                    this.attr('cursor', 'ne-resize');
                }
            } else if (relativeY > shapeHeight - resizeBorder) {     // bottom (south) border, so see if also a corner
                this.attr('cursor', 's-resize');
                if (relativeX > shapeWidth - resizeBorder) {
                    this.attr('cursor', 'se-resize');
                } else if (relativeX < resizeBorder) {
                    this.attr("cursor", 'sw-resize');
                }
            } else if (relativeY < resizeBorder) {     // top (north) border, so see if also a corner
                this.attr('cursor', 'n-resize');
                if(relativeX < resizeBorder) {
                    this.attr('cursor', 'sw-resize');
                } else if(relativeX > shapeWidth - resizeBorder){
                    this.attr('cursor', 'sw-resize');
                }
            } else {
                this.attr('cursor', 'move');
            }
            //            getBox();     // relocated to drag end function
        };

        var dragStart = function () {

            // Save some starting values
            this.ox = this.attr('x');
            this.oy = this.attr('y');
            this.ow = this.attr('width');
            this.oh = this.attr('height');

            this.dragging = true;
        };


        var dragMove = function (dx, dy) {
            // Inspect cursor to determine which resize/move process to use
            switch (this.attr('cursor')) {

                case 'w-resize' :
                    this.attr({
                        x: this.ox + dx,
//                        y: this.oy + dy,
                        width: this.ow - dx,
//                        height: this.oh - dy
                    });
                    break;

                case 'nw-resize' :
                    this.attr({
                        x: this.ox + dx,
                        y: this.oy + dy,
                        width: this.ow - dx,
                        height: this.oh - dy
                    });
                    break;

                case 'ne-resize' :
                    this.attr({                   // not changing x of origin in this case
                        y: this.oy + dy,
                        width: this.ow + dx,
                        height: this.oh - dy
                    });
                    break;

                case 'e-resize' :
                    this.attr({                   // not changing x of origin in this case
                        //                        y: this.oy + dy,
                        width: this.ow + dx,
//                        height: this.oh - dy
                    });
                    break;

                case 'se-resize' :
                    this.attr({                  // not changing x or y of origin in this case
                        width: this.ow + dx,
                        height: this.oh + dy
                    });
                    break;

                case 'sw-resize' :
                    this.attr({                   // ARE changing x of origin in this case
                        x: this.ox + dx,
                        width: this.ow - dx,
                        height: this.oh + dy
                    });
                    break;

                case 'n-resize' :
                    this.attr({                   // ARE changing y of origin in this case
                        y: this.oy + dy,
//                        width: this.ow + dx,
                        height: this.oh - dy
                    });
                    break;


                case 's-resize' :
                    this.attr({                   // not changing x or y of origin in this case
                        //                        y: this.oy + dy,
                        //                        width: this.ow + dx,
                        height: this.oh + dy
                    });
                    break;


                default :
                    this.attr({                   // default is <move> if not explicitly so (e.g., muffed n/s/e/w)
                        x: this.ox + dx,
                        y: this.oy + dy
                    });
                    break;

            }
            boxX = this.attr("x");
            boxY = this.attr("y");
            boxW = this.attr("width");
            boxH = this.attr("height");
        };

        var dragEnd = function () {
            this.dragging = false;
            getBox();               // when box drag or sizing stops, get the box data
        };

        select_box = paper.add([
            svg_box
        ]);

        select_box.mousemove(changeCursor)
        select_box.drag(dragMove, dragStart, dragEnd);
    }
    ; // end set_select_box

    function big_svg_coords() {
        c = big_svg_image.attr('src').split("scale_to_box")[1].split("/");
        return [Number(c[1]), Number(c[2]), Number(c[3]), Number(c[4])];
    }
    ;

    function getBox(reset) {
        var coords = big_svg_coords();  // "corners" of the selectable image rectangle

        imageAspectRatio = coords[2] / coords[3];

        // calculate source framing
        var SratioW = coords[2] / paperWidth;           // separate the source amd destination distortion
        var SratioH = coords[3] / paperHeight;          // by computing separate rectangle aspect ratios

        sourceX = Math.round((boxX * SratioW) + coords[0]);
        sourceY = Math.round((boxY * SratioH * imageAspectRatio) + coords[1]);
        sourceWidth = Math.round(boxW * SratioW);
        sourceHeight = Math.round(boxH * SratioH * imageAspectRatio);

        canvas = document.getElementById("selected_picture_canvas");
        context = canvas.getContext('2d');
        context.clearRect(0, 0, canvas.width, canvas.height);

        if (reset) {
            return
        };

        // calculate destination framing
        var destWidth;                  // NOTE:  destWidth and destHeight are
        var destHeight;                 // no longer the same as paperWidth/Height

        var ratioW = coords[2] / canvas.width;      // This may end up set by this file
        var ratioH = coords[3] / canvas.height;     // vs fetched from static control

        if (boxW >= boxH) {         // destination width should equal canvas.width
            destWidth = coords[2] / ratioW;
            destHeight = (boxH / boxW) * destWidth;     // dependent width assuming 1:1 pixel ratio
        }
        else {                      // destination height should equal canvas.height
            destHeight = coords[3] / ratioH;
            destWidth = (boxW / boxH) * destHeight;     // dependent height assuming 1:1 pixel ratio
        }

        var destX = canvas.width / 2 - destWidth / 2;      // center tall selection horizontally
        var destY = 0;       // bias wide selection to top  // was canvas.height / 2 - destHeight / 2;

        imageObject.src = $("#original_image").attr('src');         // make an image() object to "draw onto the canvas
        context.drawImage(imageObject, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);
    }
    ;

    $('#setBox').on('click', function () {
        addSelectBox();
    });

    $('.destroyable').on('click', function(click) {
        var name = $(this).data('object-name'); // ('object_name');
        var field = $(this).parent('div.field');

        field.html('removed, save required');
        field.addClass('destroyable');

        field.append($('<input hidden name="' +  name + '[_destroy]" value="1" >') );
    });


  function load_thumb_nav() {
    $.ajax({
      url: "<%= collection_object_buffered_data_breakdown_thumb_navigator_path(@result.sqed_depiction.id) -%>",
      success: function(html){
        $("#depiction_navigator_target").html(html);
      }
    });
  }

$(document).on('turbolinks:load', function() {
    load_thumb_nav();
});

</script>
<% else %>
  <div>
    <%= tag.span('Error in processing, image may not be available.', class: [:feedback, 'feedback-danger']) -%>
  </div>
<% end %>
